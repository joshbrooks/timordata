// Generated by CoffeeScript 1.10.0
(function() {
  var loadDetailFromHash, paginateResults;

  window.object_id = void 0;

  $(document).ready(function() {
    return $('.toolbar .toggle-search').on('click', function() {
      return $('.leftsidelist div:first').slideToggle();
    });
  });

  window.hashInformation = function() {
    var j, len, param, params, ref;
    params = {};
    ref = location.hash.replace('#', '').split('&');
    for (j = 0, len = ref.length; j < len; j++) {
      param = ref[j];
      params[param.split('=')[0]] = param.split('=')[1];
    }
    return {
      hash: location.hash,
      params: params
    };
  };

  $(document).ready(function() {
    var $searchInputs, b, detailTab, filter_buttons, filters, listTab, objectListId, selects, tab_id;
    tab_id = $('#detail').parent('.tab-pane').attr('id');
    objectListId = $('#object-list').parent('.tab-pane').attr('id');
    detailTab = $("a[href='#" + tab_id + "']");
    listTab = $("a[href='#" + objectListId + "']");
    $.fn.hideHelpText = function() {
      var name;
      name = this.attr('name');
      return $("#hint_id_" + name).hide();
    };
    selects = $('.search-form select');
    if ($.isFunction(selects.select2)) {
      selects.select2();
      selects.each(function() {
        var id, s;
        $(this).next().css({
          'width': '95%',
          'max-height': '40px;'
        });
        if ($(this).val()) {
          id = $(this).attr('id');
          s = '[href="#div_' + id + '"]';
          $(s).trigger('click');
        }
      });
    } else {
      console.warn('select2 isn\'t working - maybe library is not loaded!');
    }
    $searchInputs = $('form.search-form .nav input[checked]');
    $searchInputs.parents('label.btn').addClass('active');
    filters = {};
    filter_buttons = $searchInputs.parents('label.btn').each(function() {
      var cat, t;
      t = $(this).text();
      cat = $(this).parents('');
      if (filters[t] === void 0) {
        filters[t] = [t];
      }
      $('body').append($(this).text());
    });
    $searchInputs.parent('label').siblings().not('.active').hide();
    $searchInputs.parents('.collapse').addClass('in').attr('aria-expanded', 'true');
    b = $('<a href="#" class="btn btn-primary btn-xs"><span class="glyphicon glyphicon-plus"></span></a>').insertBefore($searchInputs.parents('div [data-toggle=buttons]'));
    b.on('click', function() {
      $(this).siblings('div:first').find('label').not('.active').toggle();
    });
    $('.auto-select2').select2().hideHelpText();
    $('.auto-multiselect').multiselect().hideHelpText();
    $('.auto-chosen').chosen().hideHelpText();
    $('[data-chosenurl]').each(function() {
      var url;
      url = $(this).data('chosenurl');
      $(this).ajaxChosen({
        dataType: 'json',
        type: 'GET',
        url: url
      });
      return $(this).hideHelpText();
    });
    $('[data-selecturl]').each(function() {
      $(this).select2({
        ajax: {
          url: $(this).data('selecturl'),
          delay: 250
        },
        minimumInputLength: 3
      });
      return $(this).hideHelpText();
    });
    if (window.location.search.search('page') > -1 || window.location.search.search('sort') > -1) {
      listTab.tab('show');
    } else if (window.location.hash.search('object') > -1) {
      detailTab.tab('show');
    }
    if ($('#object-tabs li.active').length === 0) {
      $('#object-tabs li:first a').tab('show');
    }
    $(document).on('click', 'a[href^="#object"]', function() {
      return detailTab.tab('show');
    });
    return detailTab.on('show.bs.tab', function(e) {
      var href;
      href = $(e.target).attr('href');
      if ($(href).children('#detail').length > 0) {
        if (window.hashInformation().params['object'] === void 0) {
          return window.location.hash = $('a[href^="#object"]:first').attr('href');
        }
      }
    });
  });

  loadDetailFromHash = function() {
    var detailTab, get, hash, tab_id;
    tab_id = $('#detail').parent('.tab-pane').attr('id');
    detailTab = $("a[href='#" + tab_id + "']");
    hash = hashInformation();
    get = function() {
      var link;
      if ($(document).width() <= 992 && $('#detail').length !== 0) {
        $('html,body').animate({
          scrollTop: $('#detail').offset().top
        }, 200);
      }
      hash = hashInformation();
      window.get_object_id;
      if (hash.params['object']) {
        $('li.object').removeClass('active');
        $('#detail').stop().fadeOut(400, function() {
          var d;
          if (typeof $.fn.waiting === 'function') {
            $('#rightpane .loading').remove();
            d = $('<div>').addClass('loading').appendTo('#rightpane').waiting();
            return d.waiting('play');
          }
        });
        link = $('[href="#object=' + hash.params.object + '"]').parent('li').addClass('active');
        return $.get('./' + hash.params.object + '/ajax/', function(data) {
          $('#detail').html(data);
          $('#detail').stop().fadeIn(400);
          $('#rightpane .loading').remove();
          return detailTab.tab('show');
        });
      }
    };
    if (hash.params['object'] !== object_id && hash.params['object'] !== void 0) {
      detailTab.parent('li').removeClass('disabled');
      get();
    } else {
      detailTab.parent('li').addClass('disabled');
      $('a[href="#list-tab"]').tab('show');
    }
    return window.object_id = hashInformation().params['object'];
  };

  $(window).on('hashchange', function() {
    loadDetailFromHash();
    if (window.object_list === void 0) {
      console.warn('object_list is undefined!');
    }
  });

  $(document).on('click', 'form button', function(e) {
    return window.location.hash = '';
  });

  $(document).on('click', '.object-next', function(e) {
    e.preventDefault();
    return window.location.hash = '#object=' + window.object_list[window.hashInformation().params.object].next;
  });

  $(document).on('click', '.object-last', function(e) {
    e.preventDefault();
    return window.location.hash = '#object=' + window.object_list[window.hashInformation().params.object].last;
  });

  window.setPage = function(page) {
    var page_info, pages, this_page;
    pages = $('span[data-page]').not('[data-page=next]').not('[data-page=previous]');
    this_page = $('span[data-page=' + page + ']');
    page_info = $('.pagination [data-currentpage]');
    pages.hide();
    this_page.show();
    page_info.text(page);
    return page_info.data('currentpage', page);
  };

  paginateResults = function(groupSize) {
    var i, l, new_page, page_info, text;
    l = $('.list-group');
    i = 0;
    while (l.children('.list-group-item').length > 0) {
      i += 1;
      text = groupSize * i + ' to ' + groupSize * i + groupSize;
      l.children('li').slice(0, groupSize).wrapAll('<span data-page="' + i + '" data-text="' + text + '">');
    }
    $('span[data-page]').hide();
    $('.pagination [data-pages]').text(i);
    $('span[data-page=1]').show();
    $('.pagination').data('page', 1);
    new_page = void 0;
    page_info = $('.pagination [data-currentpage]');
    page_info.text('1');
    page_info.data('currentpage', 1);
    $('a[data-page]').on('click', function(e) {
      var action, current_page;
      e.preventDefault();
      current_page = page_info.data('currentpage');
      action = $(this).data('page');
      if (action === "next" && current_page < i) {
        setPage(current_page + 1);
      }
      if (action === "previous" && current_page > 1) {
        setPage(current_page - 1);
      }
      return false;
    });
    $('#organizationSelect').multiselect({
      enableCollapsibleOptGroups: true
    });
    $('#inactiveOrganizationSelect').multiselect({});
  };

  $(document).ready(function() {
    var loadModalDeleteForm, loadModalForm;
    $.fn.selectToHidden = function() {
      console.log($(this));
      return $(this).find('select').each(function() {
        var thisname, thisvalue;
        if ($(this).children('option').length === 1) {
          return;
          console.log('hiding');
          $(this).parents('label').hide().addClass('hidden');
          thisname = $(this).prop('name');
          thisvalue = $(this).val();
          $("<input type='hidden' name='" + thisname + "' value='" + thisvalue + "'>").appendTo($(this).parents('form'));
          return $(this).parents('.form-group').remove();
        }
      });
    };
    loadDetailFromHash();
    $.fn.ajaxModal = function(options) {
      var d, defaults, modal, request, url;
      if ($.isFunction($.simplyToast)) {
        $.simplyToast('<p><b>Loading</b></p><p>Retrieving form from database, please wait....</p>');
      }
      defaults = {
        successRedirect: false,
        callback: false,
        container: false
      };
      options = $.extend(defaults, options);
      console.log(options);
      url = options.url;
      if (options.url === void 0) {
        console.error('Form load URL was undefined');
        return;
      }
      modal = $(this);
      if (options.container) {
        modal.addClass('container');
      }
      modal.find('.modal-header h4').text(options.title);
      modal.find('.modal-body').text('');
      d = $('<div>').addClass('loading').appendTo(modal.find('.modal-body')).waiting();
      d.waiting('play');
      return request = $.get(options.url).done(function() {
        var f;
        d.waiting('pause');
        d.hide();
        f = $(request.responseText);
        f.selectToHidden();
        console.log("$.get(" + url + ") done");
        f.append($('<div class="input-group input-group-sm"><span class="input-group-addon" id="basic-addon2">Your name</span><input id="form-name" name="_name" class="form-control"></div>')).append($('<div class="input-group input-group-sm"><span class="input-group-addon" id="basic-addon2">Email address</span><input name="_email" class="form-control" ></label></div>')).append($('<div class="input-group input-group-sm"><span class="input-group-addon" id="basic-addon2">Comments</span><input name="_comment" class="form-control"></label></div>'));
        f.find('[name=_name]').val(localStorage.user_name);
        f.find('[name=_email]').val(localStorage.user_email);
        f.find('.form-actions').hide();
        modal.find('.modal-body').append(f);
        f.formSetAdd();
        console.log('Appended form to body');
        f.find('[data-selecturl]').each(function() {
          console.log($(this));
          $(this).select2({
            ajax: {
              url: $(this).data('selecturl'),
              delay: 250
            },
            minimumInputLength: 3,
            allowClear: true,
            width: '100%'
          });
          $(this).hideHelpText();
          return $(this).on('select2:open', function() {
            return $('.select2-container--open').css({
              zIndex: 10000
            });
          });
        });
        f.find('[data-selecttwo]').each(function() {
          if ($.isFunction($.fn.multiselect)) {
            return $(this).multiselect();
          }
        });
        f.find('.selectmultiple').not('[data-selecturl]').each(function() {
          if ($.isFunction($.fn.multiselect)) {
            $(this).multiselect();
            return $(this).hideHelpText();
          }
        });
        f.find('.trumbowyg').each(function() {
          if ($.isFunction($.fn.trumbowyg)) {
            $(this).trumbowyg().on('dblclick', function() {
              return $(this).trumbowyg({
                lang: 'en',
                closable: true,
                mobile: true,
                fixedBtnPane: true,
                fixedFullWidth: true,
                semantic: true,
                resetCss: true,
                autoAjustHeight: true,
                autogrow: true
              });
            });
            return $(this).css('padding-top', $(this).find('ul:trumbowyg-button-pane').css('height'));
          }
        });
        f.find('.summernote').each(function() {
          if ($.isFunction($.fn.summernote)) {
            return $(this).summernote();
          } else {
            return console.warn('Requested a jquery plugin which was not loaded: trumbowyg');
          }
        });
        modal.find('.apply_datepicker').each(function() {
          console.log('Call datepicker');
          $(this).Zebra_DatePicker();
          return modal.find('.Zebra_DatePicker_Icon').css({
            left: '9px'
          });
        });
        modal.off('click', '.btn#modal-form-delete');
        modal.off('click', '.modal-footer .btn-primary');
        modal.find('.modal-footer .btn-primary').attr('data-fromurl', options.url);
        modal.on('click', '.modal-footer .btn-primary', function() {
          var validated, xhr;
          validated = true;
          console.log('validation');
          f.css({
            border: '1px solid red'
          });
          f.ajaxSubmit();
          xhr = f.data('jqxhr');
          xhr.success(function() {
            var success;
            if (options.success) {
              success = options.success;
              if ($.isFunction(success)) {
                success(xhr.responseJSON);
              } else if ($.isFunction(window[success])) {
                window[success](xhr.responseJSON);
              } else {
                console.warn("callback " + success + " failed - not a function");
              }
            }
            if ($.isFunction($.simplyToast)) {
              $.simplyToast('<p><b>Suggestion Received</b></p><p>The database team will review your change soon!</p>');
            } else {
              console.log('simplyToast function is not available');
            }
            if (xhr.responseJSON.success_url && options.reload) {
              console.log(xhr.responseJSON.success_url);
              document.location.href = xhr.responseJSON.success_url;
              location.reload(true);
            }
            localStorage.user_name = f.find('[name=_name]').val();
            localStorage.user_email = f.find('[name=_email]').val();
            return modal.modal('hide');
          });
          return xhr.error(function() {
            return $.simplyToast('<p><b>Suggestion Error</b></p><p>There was a problem with this request</p>', 'danger');
          });
        });
        $('modal #modal-form-delete').off('click');
        modal.on('click', '.btn#modal-form-delete', function(e) {
          console.log("Modal Delete triggered");
          e.preventDefault();
          return modal.find('form').ajaxSubmit({
            url: "/suggest/suggest/",
            success: function() {
              var xhr;
              xhr = $('.modal.in form').data('jqxhr');
              $.simplyToast('<p><b>Remove Request Received</b></p><p>The database team will review your change soon!</p>', 'warning');
              return $('.modal.in').modal('hide');
            },
            error: function() {
              return $.simplyToast('<p><b>Suggestion Error</b></p><p>There was a problem with this request</p>', 'danger');
            }
          });
        });
        modal.modal();
        modal.on('hidden.bs.modal', function() {
          if (options.destroyOnComplete) {
            modal.parent('.modal-scrollable').remove();
            return modal.remove();
          }
        });
        return modal.on('shown.bs.modal', function() {
          var callback;
          if (options.callback) {
            callback = options.callback;
            if ($.isFunction(callback)) {
              return callback();
            } else if ($.isFunction($.fn[callback])) {
              return $(modal)[callback]();
            } else if ($.isFunction(window[callback])) {
              return window[callback]();
            } else {
              return console.warn("callback " + callback + " failed - not a function");
            }
          }
        });
      }).error(function() {
        var a;
        if (d) {
          d.waiting('pause');
          d.hide();
        }
        a = $('<div>').addClass('alert alert-warning');
        a.text("There was a problem getting data from the server. This form is not available right now.");
        modal.find('.modal-body').append(a);
        return modal.modal();
      });
    };
    loadModalDeleteForm = function(url, title) {
      console.log('loadModalDeleteForm triggered');
      return $('#modaldeleteform').ajaxModal(url, title);
    };
    loadModalForm = function(url, title) {
      console.log('loadModalForm triggered');
      return $('#modalform').ajaxModal(url, title);
    };
    $(document).on('click', '.modal-form-load', function(e) {
      alert('obsolete: use data-modalurl instead');
      console.log('.modal-form-load clicked');
      e.preventDefault();
      return loadModalForm($(this).attr('href'), $(this).data('modaltitle'));
    });
    $(document).on('click', '.modal-deleteform-load', function(e) {
      alert('obsolete: use data-modalurl instead');
      console.log('.modal-deleteform-load clicked');
      e.preventDefault();
      return loadModalDeleteForm($(this).attr('href'), $(this).data('modaltitle'));
    });
    $(document).on('click', '[data-modalurl]', function(e) {
      var modal, options;
      e.preventDefault();
      modal = $($(this).data('modalselector') || '#modalform');
      options = {
        url: $(this).data('modalurl'),
        title: $(this).data('modaltitle') || 'Changes',
        callback: $(this).data('modalcallback') || false,
        reload: $(this).data('reload') || false,
        container: $(this).data('container') || false,
        successRedirect: $(this).data('modalnext') || void 0 ? $(this).data('modalnext') : void 0
      };
      console.log(options);
      return $(modal).ajaxModal(options);
    });
    return $.fn.formSetAdd = function() {
      console.log('Adding addition buttons for URL selection');
      console.log($(this));
      $(this).find('[data-add-modalurl]').each(function() {
        var $e, cb, d, modal, opts, setAdded;
        console.log($(this));
        $e = $(this);
        $e.css({
          width: '60%'
        });
        console.log('Creating lookup');
        setAdded = function(suggestion, label) {
          var o, su;
          su = "_" + suggestion + "_";
          console.log("Successfully triggered setAdded: " + suggestion + " " + label);
          console.log($e.prop('tagName'));
          if ($e.prop('tagName') === 'SELECT') {
            o = $('<option>');
            o.attr('selected', 'selected');
            o.attr('value', su);
            o.text(label);
            console.log('appending');
            console.log($e);
            console.log(o);
            $e.append(o);
            $e.select2("destroy");
            $e.select2({
              ajax: {
                url: $e.data('selecturl'),
                delay: 250
              },
              minimumInputLength: 3,
              allowClear: true
            });
            $e.css({
              width: '60%'
            });
          }
          if ($e.prop('tagName') === 'INPUT') {
            return $e.val(suggestion);
          }
        };
        $e = $(this);
        d = $(this).data('add-displayfield') || false;
        cb = function() {};
        if (d) {
          cb = function(rj) {
            return setAdded(rj['id'], JSON.parse(rj['data'])[d]);
          };
        } else {
          cb = function(rj) {
            return setAdded(rj['id'], 'New item');
          };
        }
        opts = {
          url: $(this).data('add-modalurl'),
          title: 'Create New',
          successRedirect: false,
          success: cb,
          destroyOnComplete: true
        };
        modal = $('#modalform').clone().removeAttr('id');
        return $("<a href=" + opts.url + ">").addClass('btn btn-sm btn-default').css({
          width: '35%'
        }).on('click', function(e) {
          e.preventDefault();
          console.log('loading secondary Create selector');
          return $(modal).ajaxModal(opts);
        }).text('Create New').insertAfter($(this));
      });
      return false;
    };
  });

  $(document).ready(function() {
    var top;
    top = $("#object-tabs").offset().top;
    $(window).on('resize', function() {
      return top = $("#object-tabs").offset().top;
    });
    return $(window).on('scroll', function() {
      if ($(window).scrollTop() > top) {
        return $("#object-tabs").addClass('sticky');
      } else {
        return $("#object-tabs").removeClass('sticky');
      }
    });
  });

  $(document).ready(function() {
    var showPlace;
    return showPlace = function() {};
  });

  $(document).ready(function() {
    return $('a[data-postform]').on('click', function(e) {
      var form, link, xhr;
      link = $(this);
      e.preventDefault();
      form = $($(this).data('postform'));
      console.log(form);
      xhr = $.post($(form).attr('action'), $(form).serializeArray());
      xhr.done(function() {
        return window.open(link.prop('href'));
      });
      return xhr.fail(function() {
        var new_form;
        new_form = $(xhr.responseText);
        new_form.append(form.find('input[name=csrfmiddlewaretoken]'));
        return form.replaceWith(new_form);
      });
    });
  });

}).call(this);

//# sourceMappingURL=object_list.js.map
